model User {
  id         String   @id @default(uuid())
  username   String   @unique
  password   String
  userTypeID String
  userType   UserType @relation(fields: [userTypeID], references: [id])
  updatedAt  DateTime @default(now())

  employee Employee?
  patient Patient?
}

model UserType {
  id   String @id @default(uuid())
  name String

  users User[]
}

model Employee {
  id             String         @id @default(uuid())
  firstName      String
  lastName       String
  departmentId   String?
  department     Department?    @relation(fields: [departmentId], references: [id])

  roleId         String?
  role           String

  onShift        Boolean        @default(false)
  user       User          @relation(fields: [id], references: [id], onDelete: Cascade)

  assignedPatients Patient[]
  medicalDeviceRequests MedicalDeviceRequest[]
  sanitationRequests SanitationRequest[]
  deviceRequests  DeviceRequest[]
  pharmacyRequests  PharmacyRequest[]
  patientRequests PatientRequest[]
  transportRequests TransportRequest[]
}


model Patient {
  id               String         @id @default(uuid())
  firstName        String
  lastName         String
  dateOfBirth      DateTime
  phone            String?
  assignedDoctor   Employee          @relation(fields: [assignedDoctorId], references: [id])
  assignedDoctorId String
  user             User               @relation(fields: [id], references: [id], onDelete: Cascade)
  transportRequest TransportRequest[]
  patientRequest  PatientRequest[]
}
