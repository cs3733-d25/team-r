model Directory {
  id              Int     @id @default(autoincrement())
  name            String
  floorNumber     Int
  building        String
  receptionNodeID String?
  receptionNode   Node?   @relation(fields: [receptionNodeID], references: [nodeID])
}

model Node {
  nodeID    String @id
  nodeType  String
  building  String
  floor     Int
  xcoord    Float
  ycoord    Float
  longName  String
  shortName String

  departments Directory[]
  edgesFrom   Edge[]      @relation("fromNode")
  edgesTo     Edge[]      @relation("toNode")
}

model Edge {
  edgeID   String @id @default(uuid())
  fromID   String
  toID     String
  // TODO: delete these floats and refactor to get the coordinates from the nodes
  fromX    Float?
  fromY    Float?
  toX      Float?
  toY      Float?
  fromNode Node   @relation("fromNode", fields: [fromID], references: [nodeID], onDelete: Cascade)
  toNode   Node   @relation("toNode", fields: [toID], references: [nodeID], onDelete: Cascade)
}

// TODO: delete this table
model Department {
  id               String     @id @default(uuid())
  name             String
  recepetionNodeID String
  // receptionNode Node @relation(fields:[recepetionNodeID], references: [nodeID])
  employee         Employee[]
}
