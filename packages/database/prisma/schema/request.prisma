model SanitationRequest {
  requestId          Int      @id @default(autoincrement())
  sanitationType     String
  priority           String
  building           String
  department         String?
  roomNumber         String
  requestTime        DateTime @default(now())
  comments           String?
  status             String
  employeeID         String
  employeeName       Employee @relation(fields: [employeeID], references: [id])
  assignedEmployeeID String
  assignedEmployee   Employee @relation("sanitationRequestAssigned", fields: [assignedEmployeeID], references: [id])
}

model DeviceRequest {
  requestId    Int      @id @default(autoincrement())
  deviceType   String
  priority     String
  building     String
  room         String
  department   String
  requestTime  DateTime @default(now())
  comments     String?
  employeeID   String
  employeeName Employee @relation(fields: [employeeID], references: [id])
  status       String

  assignedEmployeeID String
  assignedEmployee   Employee @relation("deviceRequestAssigned", fields: [assignedEmployeeID], references: [id])
}

model PharmacyRequest {
  prescriptionID         Int      @id @default(autoincrement())
  employeeID             String
  employeeName           Employee @relation(fields: [employeeID], references: [id])
  priority               String
  building               String
  department             String
  patientID              String
  // patient                Patient         @relation("Prescriptions", fields: [patientID], references: [id])
  drugName               String
  morningPillCount       Int
  middayPillCount        Int
  eveningPillCount       Int
  nightPillCount         Int
  days                   Int
  numberOfPills          Int
  refills                Int
  additionalInstructions String
  status                 String

  assignedEmployeeID String
  assignedEmployee   Employee @relation("PharmacyRequestAssigned", fields: [assignedEmployeeID], references: [id])
}

model PatientRequest {
  patientRequestID Int      @id @default(autoincrement())
  patientID        String
  patient          Patient  @relation(fields: [patientID], references: [id])
  priority         String
  building         String
  department       String
  status           String
  requestTime      DateTime @default(now())
  request          String
  employeeID       String
  employeeName     Employee @relation(fields: [employeeID], references: [id])
  comment          String

  assignedEmployeeID String
  assignedEmployee   Employee @relation("patientRequestAssigned", fields: [assignedEmployeeID], references: [id])
}

model TransportRequest {
  employeeRequestID  Int      @id @default(autoincrement())
  patientID          String
  patient            Patient  @relation(fields: [patientID], references: [id])
  employeeID         String
  employeeName       Employee @relation(fields: [employeeID], references: [id])
  transportationType String
  currentBuilding    String
  desiredBuilding    String

  priority    String
  department  String
  comments    String
  status      String
  requestTime DateTime @default(now())

  assignedEmployeeID String
  assignedEmployee   Employee @relation("transportRequestAssigned", fields: [assignedEmployeeID], references: [id])
}

model TranslateRequest {
  translateRequestID Int      @id @default(autoincrement())
  employeeID         String
  employeeName       Employee @relation(fields: [employeeID], references: [id])
  language           String
  building           String
  roomNumber         String
  status             String
  comments           String
  priority           String
  department         String
  assignedEmployeeID String
  assignedEmployee   Employee @relation("translateRequestAssigned", fields: [assignedEmployeeID], references: [id])
}

model Announcement {
  id             String    @id @default(cuid())
  title          String
  content        String
  date           DateTime
  author         String
  type           String
  expirationDate DateTime?
}

model Notification {
  id        String    @id @default(cuid())
  userId    String
  title     String
  content   String    @db.Text
  createdAt DateTime  @default(now())
  isRead    Boolean   @default(false)
  type      String // "announcement"
  sourceId  String // announcement id
  expiresAt DateTime?
  employee  Employee  @relation(fields: [userId], references: [id])
}
