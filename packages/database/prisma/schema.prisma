generator client {
  provider   = "prisma-client-js"
  output     = "../.prisma/client"
  engineType = "binary"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_URL")
}

enum UserType {
  PATIENT
  EMPLOYEE
}

enum EmployeeRole {
  DOCTOR
  NURSE
  IT_SUPPORT
  MAINTENANCE
  ADMINISTRATOR
}

enum Department {
  Specialty_Clinic
  Imaging_Suite
  Phlebotomy
  Pharmacy
  Ambulatory_UrgentCare
}

enum Gender {
  MALE
  FEMALE
  NON_BINARY
  OTHER
  PREFER_NOT_TO_SAY
}

enum RequestPriority {
  Low
  Medium
  High
  Urgent
}

enum RequestStatus {
  pending
  accepted
  in_progress
  completed
  cancelled
}

enum DeviceStatus {
  available
  in_use
  maintenance
}

enum Buildings {
  PATRIOT_PLACE_20
  PATRIOT_PLACE_22
}

model User {
  id        Int      @id @default(autoincrement())
  username  String   @unique
  password  String
  userType  UserType @default(PATIENT)
  updatedAt DateTime @default(now())

  employee           Employee?
  patient            Patient?
  sanitationRequests SanitationRequest[] @relation("sanitationRequests")
}

model Employee {
  id         Int           @id
  firstName  String
  lastName   String
  department Department?
  role       EmployeeRole?
  onShift    Boolean       @default(false)
  user       User          @relation(fields: [id], references: [id], onDelete: Cascade)

  assignedPatients Patient[]         @relation("AssignedDoctor")
  assignedRequests DeviceRequest[]   @relation("AssignedRequests")
  createdRequests  DeviceRequest[]   @relation("CreatedRequests")
  pharmacyRequests PharmacyRequest[] @relation("PharmacyRequests")
}

model Patient {
  id               Int               @id
  firstName        String
  lastName         String
  dateOfBirth      DateTime
  gender           Gender?
  phone            String?
  assignedDoctor   Employee?         @relation("AssignedDoctor", fields: [assignedDoctorId], references: [id])
  assignedDoctorId Int?
  user             User              @relation(fields: [id], references: [id], onDelete: Cascade)
  pharmacyRequests PharmacyRequest[] @relation("Prescriptions")
}

model DeviceRequest {
  requestId            Int             @id @default(autoincrement())
  deviceType           String
  priority             RequestPriority
  deliveryLocation     String
  deliveryTime         DateTime?
  requestTime          DateTime        @default(now())
  requestAcceptedTime  DateTime?
  requestCompletedTime DateTime?
  status               RequestStatus   @default(pending)
  comments             String?

  employee           Employee  @relation("CreatedRequests", fields: [employeeId], references: [id])
  employeeId         Int
  assignedEmployee   Employee? @relation("AssignedRequests", fields: [assignedEmployeeId], references: [id])
  assignedEmployeeId Int?
}

model MedicalDevice {
  medicalDeviceId   Int          @id @default(autoincrement())
  medicalDeviceType String
  currentLocation   String
  currentStatus     DeviceStatus @default(available)
  lastUpdated       DateTime     @default(now())

  // @@map("medical_devices")
}

model SanitationRequest {
  requestId      Int             @id @default(autoincrement())
  sanitationType String
  priority       RequestPriority
  department     Department?
  roomNumber     String
  requestTime    DateTime        @default(now())
  comments       String?
  status         RequestStatus   @default(pending)

  user   User @relation("sanitationRequests", fields: [userId], references: [id])
  userId Int
}

model Directory {
  id          Int       @id @default(autoincrement())
  name        String
  floorNumber Int
  building    Buildings
}

model Node {
  id          Int    @id @default(autoincrement())
  name        String @unique
  type        String
  neighbors   Edge[] @relation("FromConnection")
  connectedTo Edge[] @relation("ToConnection")
}

model Edge {
  id     Int  @id @default(autoincrement())
  fromId Int
  toId   Int
  from   Node @relation("FromConnection", fields: [fromId], references: [id])
  to     Node @relation("ToConnection", fields: [toId], references: [id])
}

model PharmacyRequest {
  prescriptionID         Int             @id @default(autoincrement())
  employeeID             Int
  employee               Employee        @relation("PharmacyRequests", fields: [employeeID], references: [id])
  priority               RequestPriority
  department             Department
  patientID              Int
  patient                Patient         @relation("Prescriptions", fields: [patientID], references: [id])
  drugName               String
  morningPillCount       Int
  middayPillCount        Int
  eveningPillCount       Int
  nightPillCount         Int
  daysdays               Int
  numberOfPills          Int
  refills                Int
  additionalInstructions String
}
