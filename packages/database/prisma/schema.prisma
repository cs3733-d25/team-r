generator client {
  provider   = "prisma-client-js"
  output     = "../.prisma/client"
  engineType = "binary"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_URL")
}

enum UserType {
  PATIENT
  EMPLOYEE
}

enum EmployeeRole {
  DOCTOR
  NURSE
  IT_SUPPORT
  MAINTENANCE
  ADMINISTRATOR
}

enum Department {
  Specialty_Clinic
  Imaging_Suite
  Phlebotomy
  Pharmacy
  Ambulatory_UrgentCare
}

enum Gender {
  MALE
  FEMALE
  NON_BINARY
  OTHER
  PREFER_NOT_TO_SAY
}

enum RequestPriority {
  Low
  Medium
  High
  Urgent
}

enum RequestStatus {
  pending
  accepted
  in_progress
  completed
  cancelled
}

enum DeviceStatus {
  available
  in_use
  maintenance
}

enum Building {
  PATRIOT_PLACE_20
  PATRIOT_PLACE_22
  CHESTNUT_HILL
}

enum RequestMedicalDevice{
  XRay
  Defibrillator
  EKG_Machine
  Syringe
  Pacemaker
}

enum NodeType {
  entrance
  reception
  parking
  hallway
  department
  elevator
  stairs
  other
}

model User {
  id        Int      @id @default(autoincrement())
  username  String   @unique
  password  String
  userType  UserType @default(PATIENT)
  updatedAt DateTime @default(now())

  employee Employee?
  patient  Patient?
  // sanitationRequests SanitationRequest[] @relation("sanitationRequests")
}

model Employee {
  id         Int           @id
  firstName  String
  lastName   String
  department Department?
  role       EmployeeRole?
  onShift    Boolean       @default(false)
  user       User          @relation(fields: [id], references: [id], onDelete: Cascade)

  assignedPatients Patient[]          @relation("AssignedDoctor")
  // assignedRequests DeviceRequest[]   @relation("AssignedRequests")
  // createdRequests  DeviceRequest[]   @relation("CreatedRequests")
  TransportRequest TransportRequest[] @relation("TransportRequest")
}

model Patient {
  id               Int                @id
  firstName        String
  lastName         String
  dateOfBirth      DateTime
  gender           Gender?
  phone            String?
  assignedDoctor   Employee?          @relation("AssignedDoctor", fields: [assignedDoctorId], references: [id])
  assignedDoctorId Int?
  user             User               @relation(fields: [id], references: [id], onDelete: Cascade)
  // pharmacyRequests PharmacyRequest[] @relation("Prescriptions")
  patientRequests  PatientRequest[]   @relation("PatientRequests")
  TransportRequest TransportRequest[] @relation("TransportRequest")
}

model MedicalDevice {
  medicalDeviceId   Int          @id @default(autoincrement())
  medicalDeviceType String
  currentLocation   String
  currentStatus     DeviceStatus @default(available)
  lastUpdated       DateTime     @default(now())

  // @@map("medical_devices")
}

model Directory {
  id          Int      @id @default(autoincrement())
  name        String
  floorNumber Int
  building    Building
}

model Node {
  nodeID    String   @id
  nodeType  NodeType
  building  Building
  floor     Int
  xcoord    Float
  ycoord    Float
  longName  String
  shortName String

  edgesFrom Edge[] @relation("fromNode")
  edgesTo   Edge[] @relation("toNode")
}

model Edge {
  edgeID   String @id @default(uuid())
  fromID   String
  toID     String
  fromX    Float
  fromY    Float
  toX      Float
  toY      Float
  fromNode Node   @relation("fromNode", fields: [fromID], references: [nodeID])
  toNode   Node   @relation("toNode", fields: [toID], references: [nodeID])
}

/**
 * REQUESTS
 */
// model ServiceRequestGeneral{
//   requestID Int @id
//   pharmacyReq PharmacyRequest?  @relation("pharmRequest")
//   //for iteration2 - do not connect the employeeName to a employee user
//   employeeName  String
//   priority  RequestPriority
//   status  RequestStatus
//   department  Department
//   location  Building
// }

model SanitationRequest {
  requestId      Int             @id @default(autoincrement())
  sanitationType String
  priority       RequestPriority
  department     Department?
  roomNumber     String
  requestTime    DateTime        @default(now())
  comments       String?
  status         RequestStatus   @default(pending)
  employeeName   String
  location       Building

  // user   User @relation("sanitationRequests", fields: [userId], references: [id])
  // userId Int
}

model DeviceRequest {
  requestId    Int             @id @default(autoincrement())
  deviceType   String
  priority     RequestPriority
  room         String
  department   Department
  requestTime  DateTime        @default(now())
  comments     String?
  employeeName String //Employee  @relation("CreatedRequests", fields: [employeeId], references: [id])
  employeeID   Int
  status       RequestStatus   @default(pending)
  // assignedEmployee   Employee? @relation("AssignedRequests", fields: [assignedEmployeeId], references: [id])
  // assignedEmployeeId Int?
}

model PharmacyRequest {
  prescriptionID         Int             @id @default(autoincrement())
  employeeName           String
  priority               RequestPriority
  department             Department
  patientID              Int
  // patient                Patient         @relation("Prescriptions", fields: [patientID], references: [id])
  drugName               String
  morningPillCount       Int
  middayPillCount        Int
  eveningPillCount       Int
  nightPillCount         Int
  days                   Int
  numberOfPills          Int
  refills                Int
  additionalInstructions String
  status                 RequestStatus
}

// model PharmacyRequest {
//   prescriptionID         Int             @id //@default(autoincrement())
//   patientID              Int
//   patient                Patient         @relation("Prescriptions", fields: [patientID], references: [id])
//   drugName               String
//   morningPillCount       Int
//   middayPillCount        Int
//   eveningPillCount       Int
//   nightPillCount         Int
//   days                   Int
//   numberOfPills          Int
//   refills                Int
//   additionalInstructions String
//   //general
//   generalRequest  ServiceRequestGeneral @relation("pharmRequest", fields: [prescriptionID], references: [requestID], onDelete: Cascade)
// }

model PatientRequest {
  patientRequestID Int             @id @default(autoincrement())
  patientID        Int
  patient          Patient         @relation("PatientRequests", fields: [patientID], references: [id])
  priority         RequestPriority
  department       Department
  location         Building
  status           RequestStatus
  requestTime      DateTime        @default(now())
}

model TransportRequest {
  employeeRequestID Int      @id @default(autoincrement())
  employeeID        Int
  employee          Employee @relation("TransportRequest", fields: [employeeID], references: [id])
  patientID         Int
  patient           Patient  @relation("TransportRequest", fields: [patientID], references: [id])
employeeName        String
  transportationType String
  currentBuilding    Building
  desiredBuilding    Building

  priority    RequestPriority
  department  Department
  comments    String
  status      RequestStatus
  requestTime DateTime        @default(now())
}

model Departments {
  type Department @id @unique
  name String
}

model Priorities {
  type RequestPriority @id @unique
  name String
}

model Statuses {
  type RequestStatus @id @unique
  name String
}

model Locations{
  type Building @id @unique
  name String
}

model Devices{
  type RequestMedicalDevice @id @unique
  name String
}